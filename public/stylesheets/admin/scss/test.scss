.test {
    background-color: red;
    div{
        background-color:blueviolet;
    }
}

// 

.list {
    width: 100px;
    height: 50px;
    background-color:blue;
    li {
        color: red;
        background-color: yellow;
        list-style: none;;
        &:nth-child(1) {
            background-color: green;
        }
    }
}

// 

.section1 {
    width: 100%;
    .list2 {
        padding: 20px;
        li {
            float: left; width: 50%;
        }
    }
}

// 

.btn1 {
    position: absolute;
    left: 0;
    background-color: #fafafa;
    border: none; padding: 20px;
    &:active {
        background: black;
        color: #fff;
    
    }
}

.list3 {
    li {
        width: 50%;
        &:last-child {background-color: palegreen;}
    }
}

// 

.fs {
    &-small {font-size: 12px;}
    &-medium {font-size: 14px;}
    &-large {font-size: 16px;}
}

// 

.list4 {
    $w1 : 100px;
    $h1 : 50px;
    $b1 : #4169e1;
    li {
        width: $w1;
        height: $h1;
        background-color: $b1;
    }
    @at-root .box1 {
        width: $w1;
        height: $h1;
        background-color: $b1;
    }
    // list - li 라는 중첩에서 벗어나서 사용하고 싶을 때 @at-root를 사용. 다만 list 내의 속성이므로
    // list의 괄호 바깥에서 사용하면 적용되지 않는다.
}

// 

.box2 {
    background-color: salmon;
    font: {
        weight: bold;
        size: 30px;
        family: sans-serif;
    };
    margin: {
        top: 10px;
        left: 20px;
    };
    padding: {
        bottom: 40px;
        right: 30px;
    };
}

// 
// 변수 (블록 내에 선언 했으면 그 블록 내에서만 적용 가능. 바깥은 공용사용 가능)
// 
$color-primary: #e96900;
$w2: 200px;
$h2: 200px;

.box3 {
    width: $w2;
    height: $h2;
    background-color: $color-primary;
}

.box4 {
    width: $w2;
    height: $h2;
    $color1: #111;
    background-color: $color1;
}
.box4-2 {
    width: $w2;
    height: $h2;
    background-color: $color-primary;
}

// 
// 변수 재 할당
// 
$red: #ff0000;
$blue: #0000ff;

$color-primary: $blue; 
$color-danger: $red;
// 위에 먼저 같은 이름으로 적용한 것이 있다면 이후에 쓴 것이 우선된다.

.box5 {color:$color-danger; background-color: $color-primary;
width: 200px; height: 200px;}

// 
// !global 전역설정 (블록 내에 설정한 변수를 바깥에 설정한 것과 동일시)
// 대신 기존에 사용하던 같은 이름의 변수가 있을 경우 갚이 이후의 적용한 걸로 덮임.
// !global < 이후 같은 변수 이름으로 쓴 다른 속성값
// 

.box6 {
    $color: #111 !global;
    background-color: $color;
    width: $w2;
    height: $h2;
}
.box6-2 {background-color: $color; width: $w2;
    height: $h2;}


// 
// !default 초기값 설정 (할당되지 않은 변수 초기값 설정)
// 이미 변수에 속성이 있다면 변경되지 않음!
// 

$color-primary: red;
.box7 {
    $color-primary: blue !default;
    background: $color-primary;
    width: 100px; height: 100px;
}

// 
// #{} 문자보간
// 

$family: unquote("droid+sans");
@import url("http://fonts.googleapis.com/css?famaily=#{$family}");
// unquote() 는 문자에서 따옴표 제거

// 
// import 가져오기
// 

// @import로 외부에서 가져온 sass는 모두 css로 출력
// 기본적으로 sass를 가져오나 css import규칙으로 컴파일 되기도함
// 1. 확장자가 .css / 2. 파일이름 http://로 시작
// 3. url() 이 붙었을 경우 / 4. 미디어쿼리가 있는 경우

@import "hello.css";
@import "http://hello.com/hello";
@import url(hello);
@import "hello" screen;

// 
// 나누기 연산 주의사항 : font: 16px / 22px; 을 쓰면 font-size와 line-height로 속성이 분리됨
// 따라서 변수에서 나누기, 다른 연산과 함께 쓰기, 괄호 묶어 쓰기
// 

// 문자연산 +
// "문자" + "문자";
// " "는 띄어쓰기

// @mixin 믹스인이름 {스타일;}

@mixin large-text {
    font-size: 22px;
    font-weight: bold;
    font-family: sans-serif;
    color: orange;
}

// 

@mixin large-text {
    font: {
        size: 22px;
        weight: bold;
        family: sans-serif;
    }
    color: orange;

    &::after {
        content: '!!';
    }
    span.icon {
        background: url("/img/icon.png");
    }
}
// 상위부모요소 참조 가능 &

// @include 믹스인 이름;

// h1 {
//     @include large-text;
//     div {
//         @include large-text;
//     }
// }

// h1과 div에 &적용한 ::after 가 붙음


//
// 인수 : 믹스인은 함수처럼 하나의 인수를 가질 수 있다
// @mixin 믹스인이름($매개변수) {스타일;}
// @include 믹스인이름(인수);
// 매개변수란 변수의 한종류로 제공되는 여러 데이터 중 하나의 데이터를 가리키기 위해 사용된다.
// 제공되는 여러 데이터를 전달인수라고 한다.
// 

@mixin dash-line($width, $color) {
    border: $width dashed $color;
}

.box1 { @include dash-line(1px, red);}
.box2 { @include dash-line(3px, yellow);}

// 
// 인수 기본값 설정 (별도의 인수 전달되지 않으면 된다.)
//@mixin 믹스인이름 ($매개변수 : 기본값) {스타일;} 
// 

@mixin dash-line($width: 2px, $color: blue) { 
    border: $width dashed $color;
}

.box1 { @include dash-line;}
.box2 {@include dash-line(5px, green);}


// 
// 키워드인수 : 인수입력 시 키워드(변수)를 입력
// 별도의 인수입력 순서 필요치 않음
// 단, 작성하지 않은 인수 적용될 수 있게 기본값 설정 필요
//
// @mixin 믹스인이름 ($매개변수A: 기본값, $매개변수B: 기본값) {스타일;}
// @include 믹스인이름 ($매개변수B: 인수);
// 요약: 하나의 믹스인안에 여러개의 매개변수를 ,로 구분하여 넣고 각각 기본값을 넣음.
// 

@mixin position (
    $p: absolute,
    $t: null,
    $b: null,
    $l: null,
    $r: null
    ) {
        position: $p;
        top: $t;
        bottom: $b;
        left: $l;
        right: $r;
}

.absolute {
    @include position ($b: 10px, $r: 20px);
}
// include에 들어가는 인수에 믹스인의 스타일에서 넣었던 키워드를 골라서 필요한 것만 설정가능 .

.fixed {
    @include position(fixed, $t:30px, $t: 40px);
} 

// 
// --------------------------------------------------------- 가변인수
// 입력한 인수 개수가 불확실한 경우, 매개변수 뒤에 ...을 붙인다.
// 
// @mixin 믹스인이름($매개변수...) {스타일;}
// @include 믹스인이름(인수a, 인수b, 인수c);
// 

@mixin bg($width, $height, $bg-values...) {
    width: $width;
    height: $height;
    background: $bg-values;    
}

div {
    @include bg (
        100px,
        200px,
        url(/img/bg1.png) no-repeat 10px 20px,
        url(/img/bg2.png) no-repeat,
        url(/img/bg3.png)
    );
    // d위의 mixin bg 설정에 맞게 인수를 순서대로 전달하다가 3번째부터는 상관없이 전달
}

@mixin font(
    $style: normal,
    $weight: normal,
    $size: 16px,
    $family: sans-serif
) {
    font: {
        style: $style;
        weight: $weight;
        size: $size;
        family: $family;
    }
}

div {
    $font-values: italic, bold, 16px, sans-serif;
    @include font($font-values...);
}
span {
    $font-values: ????????????
}

// -----------------------------------가변인수 나중에 다시 확인할 것 (이해안감)


// 
// @content 해당부분 원하는 스타일 블록 전달가능
// @mixin 믹스인이름 () {스타일; @content;}
// @include 믹스인이름() {스타일;}
 

@mixin icon ($url) {
    &::after {
        content: $url;
        @content;
    }
}

.icon1 {
    @include icon("/image/icon.png");
    // 기존기능만 사용
}

.icon2 {
    @include icon("/image/icon.png") {
        position: absolute;
    };
}

$color: red;
@mixin colors($color: blue) {
    @content;
    background-color: $color;
    border-color: $color;
}

div {
    @include colors() {
        color: $color;
    }
}

